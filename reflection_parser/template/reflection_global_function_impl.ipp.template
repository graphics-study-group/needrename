namespace Engine
{
    namespace Reflection
    {
        template <typename T>
        std::shared_ptr<Type> GetTypeFromObject(const T &obj)
        {
            % for i, class_name in enumerate(class_names):
            % if i == 0:
            if constexpr (std::is_same_v<T, ${class_name}>)
            % else:
            else if constexpr (std::is_same_v<T, ${class_name}>)
            % endif
                return Type::s_type_map["${class_name}"];
            % endfor
            else
                return GetType(typeid(T).name(), &typeid(T));
        }
    }
}
