#include "registrar_declare.hpp"
#include <Reflection/Type.h>
static void RegisterAllTypes()
{
    % for class_type in parser.types.values():
    auto Type_${class_type.mangled_name} = Engine::Reflection::TypeRegistrar::Register_${class_type.mangled_name}();
    % endfor

    % for enum_type in parser.enums.values():
    Engine::Reflection::TypeRegistrar::Register_${enum_type.mangled_name}();
    % endfor

    % for class_type in parser.types.values():
    Engine::Reflection::TypeRegistrar::RegisterMethodField_${class_type.mangled_name}(Type_${class_type.mangled_name});
    % endfor

    % for class_type in parser.types.values():
    % for base_type in class_type.base_types:
    % if parser.in_record_type(base_type.full_name):
    Type_${class_type.mangled_name}->AddBaseType(Engine::Reflection::Type::s_index_type_map[Engine::Reflection::Type::s_name_index_map.find("${base_type.full_name}")->second]);
    % endif
    % endfor
    % endfor
}
